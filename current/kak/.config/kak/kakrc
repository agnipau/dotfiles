source ~/.config/kak/colors/gruvbox.kak
source ~/.config/kak/filetype/arch-linux.kak
source ~/.config/kak/filetype/asciidoc.kak
source ~/.config/kak/filetype/c-family.kak
source ~/.config/kak/filetype/kakrc.kak
source ~/.config/kak/filetype/sh.kak
source ~/.config/kak/filetype/rust.kak

# Window focus.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾

set-face global CursorLine "default,%opt{gruvbox_bg0}"
set-face global InactiveCursor "default,%opt{gruvbox_bg4}"
add-highlighter global/ line '%val{cursor_line}' CursorLine

hook global FocusIn .* %{
    set-face window CursorLine "default,%opt{gruvbox_bg0}"
    set-face window PrimaryCursor PrimaryCursor
    set-face window PrimaryCursorEol PrimaryCursorEol
    set-face window SecondaryCursor SecondaryCursor
    set-face window SecondaryCursorEol SecondaryCursorEol
    set-face window LineNumberCursor LineNumberCursor
    set-face window PrimarySelection PrimarySelection
    set-face window SecondarySelection SecondarySelection
}

hook global FocusOut .* %{
    set-face window CursorLine "default,%opt{gruvbox_bg0_h}"
    set-face window PrimaryCursor InactiveCursor
    set-face window PrimaryCursorEol InactiveCursor
    set-face window SecondaryCursor InactiveCursor
    set-face window SecondaryCursorEol InactiveCursor
    set-face window LineNumberCursor LineNumbers
    set-face window PrimarySelection InactiveCursor
    set-face window SecondarySelection InactiveCursor
}

# Autowrap.
# ‾‾‾‾‾‾‾‾‾

declare-option -docstring "maximum amount of characters per line, after which a newline character will be inserted" \
    int autowrap_column 80

define-command -hidden autowrap-cursor %{
    evaluate-commands -save-regs '/"|^@m' %{
        try %{
            # If the line isn't too long, do nothing.
            execute-keys -draft "<a-x><a-k>^[^\n]{%opt{autowrap_column},}[^\n]<ret>"

            try %{
                set-register m "%val{selections_desc}"

                # If we're adding characters past the limit, just wrap them around.
                execute-keys -draft "<a-h><a-k>.{%opt{autowrap_column}}\h*[^\s]*<ret>1s(\h+)[^\h]*\z<ret>c<ret>"
            } catch %{
                # If we're adding characters in the middle of a sentence, use
                # the `fmtcmd` command to wrap the entire paragraph.
                evaluate-commands %sh{
                    printf %s "
                        evaluate-commands -draft %{
                            execute-keys '<a-]>p<a-x><a-j>|kakconf wrap-text -w $kak_opt_autowrap_column<ret>'
                            try %{ execute-keys s\h+$<ret> d }
                        }
                        select '${kak_main_reg_m}'
                    "
                }
            }
        }
    }
}

define-command autowrap-enable -docstring "Automatically wrap the lines in which characters are inserted" %{
    hook -group autowrap window InsertChar [^\n] autowrap-cursor
}

define-command autowrap-disable -docstring "Disable automatic line wrapping" %{
    remove-hooks window autowrap
}

hook global WinSetOption filetype=(asciidoc|markdown) %{
    autowrap-enable
    hook -once window WinSetOption filetype=(?!asciidoc)(?!markdown).* %{
        autowrap-disable
    }
}

define-command wrap-text -docstring "Wrap text to fit %opt{autowrap_column} chars for %%opt{filetype}" %{
    execute-keys %sh{
        if [ "$kak_opt_filetype" ]; then
            echo "| kakconf wrap-text -f $kak_opt_filetype -w $kak_opt_autowrap_column<ret>"
        else
            echo "| kakconf wrap-text -w $kak_opt_autowrap_column<ret>"
        fi
    }
}

map global normal '=' ': wrap-text<ret>' -docstring "wrap text to fit %opt{autowrap_column} chars for %%opt{filetype}"

# Appearance.
# ‾‾‾‾‾‾‾‾‾‾‾

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ column "%opt{autowrap_column}" "default,%opt{gruvbox_bg0}"
    # add-highlighter window/ number-lines -hlcursor -separator ' ' # -relative
}

# Show matching char.
add-highlighter global/ show-matching
# Wrap lines and show a visual indicator.
add-highlighter global/ wrap -word -indent -marker '↪ '
set-option global ui_options ncurses_assistant=none ncurses_enable_mouse=true ncurses_status_on_top=false
# Disable startup screen message.
set-option global startup_info_version -1
set-option global modelinefmt '%val{cursor_line}:%val{cursor_column}:%val{buf_line_count} %val{bufname} %opt{filetype} {{mode_info}} %val{client}@[%val{session}]'

# General settings.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

set-option global tabstop 4
set-option global indentwidth 4
set-option global autoreload no

define-command pwd -docstring 'Print the current working directory' %{
    echo %sh{ echo "$PWD" }
}

define-command put-cursors -params 1.. -docstring 'Put cursors at specific line numbers' %{
    evaluate-commands %sh{
        kakconf put-cursors -t "$kak_buf_line_count" -l $*
    }
}
define-command put-cursors-zero -params 1.. -docstring 'Put cursors at specific line numbers (0-based indexes)' %{
    evaluate-commands %sh{
        kakconf put-cursors -z -t "$kak_buf_line_count" -l $*
    }
}

declare-option -hidden str temp_edit_last_buffer ""
define-command temp-edit -params 1..2 -docstring 'Edit that uses only one buffer' %{
    evaluate-commands %sh{
        if [ "$kak_opt_temp_edit_last_buffer" ]; then
            echo delete-buffer "'$(kakconf double-string \' <<<"$kak_opt_temp_edit_last_buffer")'"
        fi
    }
    try %{
        buffer %arg{1}
        execute-keys %sh{
            [ "$2" ] && echo "${2}g"
        }
        set-option global temp_edit_last_buffer %{}
    } catch %{
        set-option global temp_edit_last_buffer %arg{1}
        edit %arg{1} %arg{2}
    }
}
define-command temp-delete-buffer -docstring 'Delete the buffer used by `temp-edit`' %{
    evaluate-commands %sh{
        if [ "$kak_opt_temp_edit_last_buffer" ]; then
            echo delete-buffer "'$(kakconf double-string \' <<<"$kak_opt_temp_edit_last_buffer")'"
            echo set-option global temp_edit_last_buffer %{}
        fi
    }
}

define-command backup-selections -docstring 'Backup all selections to the backup register' %{
    execute-keys -draft '"bZ'
}
define-command restore-selections -docstring 'Restore all selections from the backup register' %{
    execute-keys '"bz'
}

# FZF.
# ‾‾‾‾

define-command fzf-edit -docstring 'Edit file using FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
fzfpreview=\"buffile=\\\$(kakconf double-string \' <<<{}); kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ temp-edit '\\\$buffile' }\\\"\"
result=\"\$(fzf --preview=\"\$fzfpreview\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            buffer $kak_quoted_buffile
            temp-delete-buffer
        }
    \"
else
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            set-option global temp_edit_last_buffer %{}
        }
    \"
fi
"
    }
}

define-command fzf-cd -docstring 'Change directory using FZF' %{
    nop %sh{
        tmpfile=/tmp/kak_cd
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
        edit -readonly $tmpfile
        remove-highlighter \"window/column_${kak_opt_autowrap_column}_default,$kak_opt_gruvbox_bg0\"
    }
\"

args=\"\$(fd --type d --hidden --follow --exclude .git | fzf --preview=\"ls -lha {+} >$tmpfile; kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ edit! -readonly $tmpfile }\\\"\" --preview-window=':0')\"

if [ \"\$args\" ]; then
    args=\$(kakconf double-string \' <<<\"\$args\")
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            change-directory '\$args'
        }
    \"
fi

kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        restore-selections
        delete-buffer $tmpfile
    }
\"
rm -f $tmpfile
"
    }
}

define-command fzf-change-buffer -docstring 'Change buffer using FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
fzfpreview=\"buffile=\\\$(kakconf double-string \' <<<{}); kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ buffer '\\\$buffile' }\\\"\"
eval \"set -- $kak_quoted_buflist\"
result=\"\$(printf '%s\n' \"\$@\" | fzf --preview=\"\$fzfpreview\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            buffer $kak_quoted_buffile
        }
    \"
fi
"
    }
}

define-command fzf-delete-buffer -docstring 'Delete buffer using FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
fzfpreview=\"buffile=\\\$(kakconf double-string \' <<<{}); kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ buffer '\\\$buffile' }\\\"\"
eval \"set -- $kak_quoted_buflist\"
result=\"\$(printf '%s\n' \"\$@\" | fzf --preview=\"\$fzfpreview\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            buffer $kak_quoted_buffile
        }
    \"
else
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            delete-buffer
        }
    \"
fi
"
    }
}

define-command fzf-lines -docstring 'Search through lines of a file using FZF' %{
    nop %sh{
        tmpfile=/tmp/kak_lines
        mkfifo $tmpfile
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
        write $tmpfile
    }
\"

result=\"\$(fzf --preview=\"kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ put-cursors-zero {+n} }\\\"\" --preview-window=':0' <$tmpfile)\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            restore-selections
        }
    \"
fi
rm -f $tmpfile
"
    }
}

define-command fzf-rg -params 1 -docstring 'Jump to a file at a specific line using Ripgrep and FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
    }
\"

result=\"\$(rg ${1@Q} --line-number | fzf --preview=\"kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ temp-edit \\\$(rg '(.+):(\d+)' -o -r '\\\$1 \\\$2' <<<{}) }\\\"\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            restore-selections
            temp-delete-buffer
        }
    \"
else
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            set-option global temp_edit_last_buffer %{}
        }
    \"
fi
"
    }
}

define-command fzf-rg-prompt -docstring 'Jump to a file at a specific line using Ripgrep and FZF (prompt)' %{
    prompt 'ripgrep:' %{fzf-rg %val{text}}
}

declare-user-mode fzf
map global user f ': enter-user-mode fzf<ret>' -docstring 'FZF mode'
map global fzf f ': fzf-edit<ret>' -docstring 'edit file using FZF'
map global fzf d ': fzf-cd<ret>' -docstring 'change directory using FZF'
map global fzf b ': fzf-change-buffer<ret>' -docstring 'change buffer using FZF'
map global fzf B ': fzf-delete-buffer<ret>' -docstring 'delete buffer using FZF'
map global fzf l ': fzf-lines<ret>' -docstring 'search through lines of a file using FZF'
map global fzf r ': fzf-rg-prompt<ret>' -docstring 'jump to a file at a specific line using Ripgrep and FZF (prompt)'

# System clipboard handling.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command xsel-yank -docstring 'Yank active selection to X11 clipboard' %{
    execute-keys '<a-|>xsel -ib<ret>: echo -markup %{{Information}yanked active selection to X11 clipboard}<ret>'
}
define-command xsel-replace -docstring "Replace all selections with X11 clipboard's contents" %{
    execute-keys '|xsel -ob<ret>'
}
define-command xsel-paste -params 1..2 -docstring 'Paste from X11 clipboard' %{
    evaluate-commands %sh{
        if [ "$2" ]; then
            kakconf paste "$1" "$2"
        else
            kakconf paste "$1"
        fi
    }
}

map global user p ': xsel-paste after<ret>' -docstring 'paste (after) from X11 clipboard'
map global user P ': xsel-paste before<ret>' -docstring 'paste (before) from X11 clipboard'
map global user <a-p> ': xsel-paste after -s<ret>' -docstring 'paste (after and select) from X11 clipboard'
map global user <a-P> ': xsel-paste before -s<ret>' -docstring 'paste (before and select) from X11 clipboard'
map global user y ': xsel-yank<ret>' -docstring 'yank active selection to X11 clipboard'
map global user R ': xsel-replace<ret>' -docstring "replace all selections with X11 clipboard's contents"

# Highlight hidden characters.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command toggle-whitespaces -docstring 'Toggle the visibility of whitespace characters' %{
    try %{
        add-highlighter window/ show-whitespaces
    } catch %{
        remove-highlighter window/show-whitespaces
    }
}

map global user 'h' ': toggle-whitespaces<ret>' -docstring 'toggle the visibility of whitespace characters'

# TODO(agnipau): Auto pairs.

# Increment/decrement numbers.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command increment-number -params 1 -docstring "Increment the selection" %{
    execute-keys "| kakconf inc-number -o %arg{1}<ret>"
}
define-command decrement-number -params 1 -docstring "Decrement the selection" %{
    execute-keys "| kakconf dec-number -o %arg{1}<ret>"
}
define-command incnumber -docstring "Increment the selection interactively" %{
    prompt 'increment:' %{increment-number %val{text}}
}
define-command decnumber -docstring "Decrement the selection interactively" %{
    prompt 'decrement:' %{decrement-number %val{text}}
}

declare-user-mode arithmetic-lock
map global user a ': enter-user-mode -lock arithmetic-lock<ret>' -docstring 'arithmetic mode (lock)'
map global arithmetic-lock j ': decrement-number 1<ret>' -docstring 'decrement number by 1'
map global arithmetic-lock k ': increment-number 1<ret>' -docstring 'increment number by 1'
map global arithmetic-lock J ': decrement-number 10<ret>' -docstring 'decrement number by 10'
map global arithmetic-lock K ': increment-number 10<ret>' -docstring 'increment number by 10'
declare-user-mode arithmetic
map global user A ': enter-user-mode arithmetic<ret>' -docstring 'arithmetic mode'
map global arithmetic j ': decnumber<ret>' -docstring 'decrement number'
map global arithmetic k ': incnumber<ret>' -docstring 'increment number'

# EditorConfig.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global BufCreate .*[.](editorconfig) %{
    set-option buffer filetype ini
    set-option buffer static_words indent_style indent_size tab_width \
        end_of_line charset insert_final_newline trim_trailing_whitespace root \
        latin1 utf-8 utf-8-bom utf-16be utf-16le lf cr crlf unset space tab \
        max_line_length
}

define-command editorconfig-load -params ..1 -docstring "editorconfig-load [file]: set formatting behavior according to editorconfig" %{
    evaluate-commands %sh{ kakconf editorconfig -p "${1:-$kak_buffile}" }
}
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Highlight word under cursor.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# Taken from mawww's dotfiles.

# set-face global CurrentWord "default,%opt{gruvbox_bg2}"

# hook global NormalIdle .* %{
#     evaluate-commands -draft %{
#         try %{
#             execute-keys '<space><a-i>w <a-k>\A\w+\z<ret>'
#             add-highlighter -override global/currentword regex "\b\Q%val{selection}\E\b" 0:CurrentWord
#         } catch %{
#             add-highlighter -override global/currentword group
#         }
#     }
# }

# Tab behavior.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾

# Insert spaces when tab is pressed.
hook global InsertChar '\t' %{
    execute-keys -draft "h%opt{indentwidth}@"
}

# Delete %opt{softtabstop} number of spaces with a single keypress if possible.
hook global InsertDelete ' ' %{
    try %{
        execute-keys -itersel -draft "<a-h><a-k>^\h+.\z<ret>I<space><esc><lt>"
    } catch %{
        try %{
            execute-keys -itersel -draft "h%opt{softtabstop}<s-h>2<s-l>s\h+\z<ret>d"
        }
    }
}

# Remove trailing spaces before saving.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global BufWritePre .* %{
    try %{
        execute-keys -draft %sh{
            case "$kak_opt_filetype" in
                markdown) ;;
                *) echo '%s\h+$<ret>d' ;;
            esac
        }
    }
}

# Comments.
# ‾‾‾‾‾‾‾‾‾

# Line comments.
declare-option -docstring "characters inserted at the beginning of a commented line" \
    str comment_line '#'

# Block comments.
declare-option -docstring "characters inserted before a commented block" \
    str comment_block_begin
declare-option -docstring "characters inserted after a commented block" \
    str comment_block_end

# Default comments for all languages.
hook global BufSetOption filetype=asciidoc %{
    set-option buffer comment_line '//'
    set-option buffer comment_block_begin '////'
    set-option buffer comment_block_end '////'
}

hook global BufSetOption filetype=(c|cpp|dart|javascript|rust|typescript) %{
    set-option buffer comment_line '//'
    set-option buffer comment_block_begin '/*'
    set-option buffer comment_block_end '*/'
}

hook global BufSetOption filetype=css %{
    set-option buffer comment_line ''
    set-option buffer comment_block_begin '/*'
    set-option buffer comment_block_end '*/'
}

hook global BufSetOption filetype=ini %{
    set-option buffer comment_line ';'
}

hook global BufSetOption filetype=(html|xml) %{
    set-option buffer comment_line ''
    set-option buffer comment_block_begin '<!--'
    set-option buffer comment_block_end '-->'
}

hook global BufSetOption filetype=latex %{
    set-option buffer comment_line '%'
}

hook global BufSetOption filetype=markdown %{
    set-option buffer comment_line ''
    set-option buffer comment_block_begin '[//]: # "'
    set-option buffer comment_block_end '"'
}

hook global BufSetOption filetype=zig %{
    set-option buffer comment_line '//'
}

hook global BufSetOption filetype=python %{
    set-option buffer comment_block_begin "'''"
    set-option buffer comment_block_end "'''"
}

define-command extend-selections-left -docstring 'extend selections to the left to align with the leftmost selected column' %{
    evaluate-commands %sh{
        seldesc=$(kakconf extend-selections -d left -s "$kak_selections_desc")
        echo select "$seldesc"
    }
}

define-command comment-block -docstring '(un)comment selections using block comments' %{
    evaluate-commands %sh{
        if [ -z "${kak_opt_comment_block_begin}" ] || [ -z "${kak_opt_comment_block_end}" ]; then
            echo "fail \"The 'comment_block' options are empty, could not comment the selection\""
        fi
    }

    evaluate-commands -save-regs '"/' -draft %{
        # Keep non-empty selections.
        execute-keys <a-K>\A\s*\z<ret>

        try %{
            # Assert that the selection has been commented.
            set-register / "\A\Q%opt{comment_block_begin}\E.*\Q%opt{comment_block_end}\E\n*\z"
            execute-keys "s<ret>"
            # Uncomment it.
            set-register / "\A\Q%opt{comment_block_begin}\E|\Q%opt{comment_block_end}\E\n*\z"
            execute-keys s<ret>d
        } catch %{
            # Comment the selection.
            set-register '"' "%opt{comment_block_begin}"
            execute-keys P
            set-register '"' "%opt{comment_block_end}"
            execute-keys p
        }
    }
}

define-command comment-line -docstring '(un)comment selected lines using line comments' %{
    evaluate-commands %sh{
        if [ -z "${kak_opt_comment_line}" ]; then
            echo "fail \"The 'comment_line' option is empty, could not comment the line\""
        fi
    }

    evaluate-commands -save-regs '"/' -draft %{
        # Select the content of the lines, without indentation.
        execute-keys <a-s>gi<a-l>

        try %{
            # Keep non-empty lines.
            execute-keys <a-K>\A\s*\z<ret>
        }

        try %{
            set-register / "\A\Q%opt{comment_line}\E\h?"

            try %{
                # See if there are any uncommented lines in the selection.
                execute-keys -draft <a-K><ret>

                # There are uncommented lines, so comment everything.
                set-register '"' "%opt{comment_line} "
                extend-selections-left
                execute-keys P
            } catch %{
                # All lines were commented, so uncomment everything.
                execute-keys s<ret>d
            }
        }
    }
}

map global normal '#' ': comment-line<ret>' -docstring '(un)comment selected lines using line comments'
map global normal '<a-#>' ': comment-block<ret>' -docstring '(un)comment selections using block comments'

# Custom mappings.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

map global normal '<space>' ',' -docstring 'leader key'
map global normal ',' '<space>' -docstring 'remove all selections except main'
map global normal '<a-,>' '<a-space>' -docstring 'remove the main selection'

map global user '<space>' '/(?i)' -docstring 'search (case insensitive)'

# Means <c-j>.
map global normal '<ret>' '3j'
map global normal '<c-k>' '3k'
# Means <c-h>.
map global normal '<backspace>' 'gh'
map global normal '<c-l>' 'gl'

# Center vertically on next/previous search result.
map global normal n nvv
map global normal N Nvv
map global normal <a-n> <a-n>vv
map global normal <a-N> <a-N>vv

# Window management.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

declare-option -docstring 'Controls the layout of the panes' bool wm_focus_mode false
define-command wm-focus-mode -docstring 'Toggle focus mode' %{
    evaluate-commands %sh{
        if [ "$kak_opt_wm_focus_mode" == true ]; then
            echo set-option global wm_focus_mode false
        else
            echo set-option global wm_focus_mode true
        fi
        echo wm-balance
    }
}

define-command wm-balance -docstring 'Balance the panes according to %opt{wm_focus_mode}' %{
    nop %sh{
        if [ "$kak_opt_wm_focus_mode" == true ]; then
            active_pane="$(tmux run 'echo #{pane_id}')"
            size=100
            for id in $(tmux list-panes -F '#{pane_id}'); do
                [ "$id" == "$active_pane" ] && continue
                tmux resize-pane -t "$id" -x '5%'
                size="$(( size - 5 ))"
            done
            tmux resize-pane -t "$active_pane" -x "$size%"
        else
            tmux select-layout even-horizontal
        fi
    }
}

define-command wm-split -docstring 'New horizontal split and balance splits horizontally' %{
    evaluate-commands %sh{
        tmux split-window -h "kak -c $kak_session"
        echo wm-balance
    }
}

define-command wm-close -docstring 'Close the current split and balance splits horizontally' %{
    evaluate-commands %sh{
        tmux kill-pane
        echo wm-balance
    }
}

define-command wm-focus -params 1 -docstring 'Focus left split' %{
    evaluate-commands %sh{
        tmux select-pane "$1"
        echo wm-balance
    }
}

declare-user-mode wm
map global normal '<c-w>' ': enter-user-mode wm<ret>' -docstring 'window management mode'
map global wm '<c-w>' ': wm-split<ret>' -docstring 'new horizontal split and balance splits horizontally'
map global wm '<backspace>' ': wm-focus -L<ret>' -docstring 'focus left split'
map global wm '<c-l>' ': wm-focus -R<ret>' -docstring 'focus right split'
map global wm '<ret>' ': wm-focus -D<ret>' -docstring 'focus below split'
map global wm '<c-k>' ': wm-focus -U<ret>' -docstring 'focus above split'
map global wm '<c-d>' ': wm-close<ret>' -docstring 'close the current split and balance splits horizontally'
map global wm '<c-f>' ': wm-focus-mode<ret>' -docstring 'toggle focus mode'

# Surround.
# ‾‾‾‾‾‾‾‾‾

declare-user-mode surround
map global user s ': enter-user-mode surround<ret>' -docstring 'surround mode'

define-command surround-str -docstring 'surround selection with string' %{
    execute-keys "Ls\A.|.\z<ret>i"
}

# This single line blows Tim Pope's vim-surround away.
# Kakoune is way too powerful to be real.
map global surround s ': surround-str<ret>' -docstring 'surround with string'

declare-user-mode surround-lock
map global user S ': enter-user-mode -lock surround-lock<ret>' -docstring 'surround mode (lock)'

define-command surround-pair -params 2 -docstring 'Surround selection with pair' %{
    execute-keys "i%arg{1}<esc>Ha%arg{2}<esc><ret>"
}

map global surround-lock ( ': surround-pair ( )<ret>' -docstring 'surround with ()'
map global surround-lock ) ': surround-pair ( )<ret>' -docstring 'surround with ()'
map global surround-lock [ ': surround-pair [ ]<ret>' -docstring 'surround with []'
map global surround-lock ] ': surround-pair [ ]<ret>' -docstring 'surround with []'
map global surround-lock { ': surround-pair { }<ret>' -docstring 'surround with {}'
map global surround-lock } ': surround-pair { }<ret>' -docstring 'surround with {}'

# LSP.
# ‾‾‾‾

# evaluate-commands %sh{
#     kak-lsp --kakoune -s "$kak_session"
# }
#
# set-option global lsp_diagnostic_line_error_sign '█'
# # set-option global lsp_diagnostic_line_warning_sign '▓'
# set-option global lsp_diagnostic_line_warning_sign '▒'
# set-option global lsp_hover_anchor true
# set-option global lsp_insert_spaces true
# set-option global lsp_auto_highlight_references true
#
# set-face global DiagnosticError "default+u"
# set-face global DiagnosticWarning "default+u"
# set-face global LineFlagErrors "%opt{gruvbox_c9_red}"
#
# map global user 'l' ': enter-user-mode lsp<ret>' -docstring 'LSP mode'
# map global normal '<c-f>' ': lsp-hover<ret>' -docstring 'show info for current position'
# map global lsp 'R' ': lsp-rename-prompt<ret>' -docstring 'rename symbol under the main cursor (prompt for a new name)'
#
# hook global WinSetOption filetype=(rust-custom|python|sh|dart) %{
#     lsp-enable-window
# }
#
# define-command lsp-restart -docstring 'Restart kak-lsp session' %{
#     lsp-stop
#     lsp-start
# }

# Custom objects.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

# Taken from mawww's dotfiles.
map -docstring "XML tag object" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

# Format.
# ‾‾‾‾‾‾‾

declare-option -docstring "shell command used for the 'format-selections' and 'format-buffer' commands" \
    str formatcmd

define-command format-buffer -docstring "Format the contents of the buffer" %{
    evaluate-commands -draft %{
        execute-keys '%'
        format-selections
    }
}

define-command format-selections -docstring "Format the selections individually" %{
    evaluate-commands %sh{
        if [ -z "${kak_opt_formatcmd}" ]; then
            echo "fail 'The option ''formatcmd'' must be set'"
        fi
    }
    evaluate-commands -draft -no-hooks -save-regs '|' %{
        set-register '|' %{
            format_in="$(mktemp "${TMPDIR:-/tmp}"/kak-formatter.XXXXXX)"
            format_out="$(mktemp "${TMPDIR:-/tmp}"/kak-formatter.XXXXXX)"

            cat >"$format_in"
            eval "$kak_opt_formatcmd" <"$format_in" >"$format_out"
            if [ $? -eq 0 ]; then
                cat "$format_out"
            else
                printf 'eval -client %s %%{ fail formatter returned an error %s }\n' "$kak_client" "$?" | kak -p "$kak_session"
                cat "$format_in"
            fi
            rm -f "$format_in" "$format_out"
        }
        execute-keys '|<ret>'
    }
}

# Languages.
# ‾‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt --config "edition=2018"'
    hook buffer BufWritePre .* %{format-buffer}
    # set-option buffer lsp_server_configuration rust.clippy_preference="on"
}

hook global WinSetOption filetype=zig %{
    set-option buffer formatcmd 'zig fmt --stdin'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=python %{
    set-option buffer formatcmd 'autopep8 -'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=cpp %{
    set-option buffer formatcmd 'clang-format'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=grep %{
    map buffer normal '<c-f>' ': grep-jump<ret>'
    # TODO(agnipau): Why this is buggy?
    # map buffer goto 'd' ': grep-jump<ret>'
}

hook global WinSetOption filetype=html %{
    set-option buffer formatcmd 'prettier --parser=html'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=typescript %{
    set-option buffer formatcmd 'prettier --parser=typescript'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=css %{
    set-option buffer formatcmd 'prettier --parser=css'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global WinSetOption filetype=json %{
    set-option buffer formatcmd 'jq .'
    hook buffer BufWritePre .* %{format-buffer}
}

hook global BufCreate '.*\.config/polybar/config$' %{
    set-option buffer filetype ini
}


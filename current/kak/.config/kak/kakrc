colorscheme gruvbox

# Window focus.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾

set-face global CursorLine "default,%opt{gruvbox_bg0}"
add-highlighter global/ line '%val{cursor_line}' CursorLine
set-face global InactiveCursor "default,%opt{gruvbox_bg4}"

hook global FocusIn .* %{
    set-face window CursorLine "default,%opt{gruvbox_bg0}"
    set-face window PrimaryCursor PrimaryCursor
    set-face window PrimaryCursorEol PrimaryCursorEol
    set-face window SecondaryCursor SecondaryCursor
    set-face window SecondaryCursorEol SecondaryCursorEol
    set-face window LineNumberCursor LineNumberCursor
    set-face window PrimarySelection PrimarySelection
    set-face window SecondarySelection SecondarySelection
}

hook global FocusOut .* %{
    set-face window CursorLine "default,%opt{gruvbox_bg0_h}"
    set-face window PrimaryCursor InactiveCursor
    set-face window PrimaryCursorEol InactiveCursor
    set-face window SecondaryCursor InactiveCursor
    set-face window SecondaryCursorEol InactiveCursor
    set-face window LineNumberCursor LineNumbers
    set-face window PrimarySelection InactiveCursor
    set-face window SecondarySelection InactiveCursor
}

# Autowrap.
# ‾‾‾‾‾‾‾‾‾

set-option global autowrap_column 80
set-option global autowrap_fmtcmd 'kakconf wrap-text -w %c'
set-option global autowrap_format_paragraph yes

hook global WinSetOption filetype=(asciidoc|markdown) %{
    autowrap-enable
    hook -once window WinSetOption filetype=(?!asciidoc)(?!markdown).* %{
        autowrap-disable
    }
}

define-command wrap -docstring "Wrap comment to fit %opt{autowrap_column} chars for %%opt{filetype}" %{
    execute-keys "| kakconf wrap-text -f %opt{filetype} -w %opt{autowrap_column}<ret>"
}

map global normal '=' ': wrap<ret>' -docstring "Wrap comment to fit %opt{autowrap_column} chars for %%opt{filetype}"

# Appearance.
# ‾‾‾‾‾‾‾‾‾‾‾

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ column "%opt{autowrap_column}" "default,%opt{gruvbox_bg0}"
    # add-highlighter window/ number-lines -hlcursor -separator ' ' # -relative
}

# Show matching char.
add-highlighter global/ show-matching
# Wrap lines and show a visual indicator.
add-highlighter global/ wrap -word -indent -marker '↪ '
set-option global ui_options ncurses_assistant=none ncurses_status_on_top=false
# Disable startup screen.
set-option global startup_info_version -1

# General settings.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

set-option global tabstop 4
set-option global indentwidth 4
set-option global modelinefmt '%val{cursor_line}:%val{cursor_column}:%val{buf_line_count} %val{bufname} {{mode_info}} %val{client}@[%val{session}]'
set-option global grepcmd 'rg -L --hidden --with-filename --column'
set-option global autoreload no

map global normal n nvv
map global normal N Nvv
map global normal <a-n> <a-n>vv
map global normal <a-N> <a-N>vv

define-command pwd -docstring 'Print the current working directory' %{
    evaluate-commands %sh{
        echo "echo $PWD"
    }
}

define-command put-cursors -params 1.. -docstring 'Put cursors at specific line numbers' %{
    evaluate-commands %sh{
        kakconf put-cursors -t "$kak_buf_line_count" -l $*
    }
}
define-command put-cursors-zero -params 1.. -docstring 'Put cursors at specific line numbers (0-based indexes)' %{
    evaluate-commands %sh{
        kakconf put-cursors -z -t "$kak_buf_line_count" -l $*
    }
}

declare-option -hidden str temp_edit_last_buffer ""
define-command temp-edit -params 1..2 -docstring 'Edit that uses only one buffer' %{
    evaluate-commands %sh{
        if [ "$kak_opt_temp_edit_last_buffer" ]; then
            echo delete-buffer "'$(kakconf double-string \' <<<"$kak_opt_temp_edit_last_buffer")'"
        fi
    }
    try %{
        buffer %arg{1}
        execute-keys %sh{
            [ "$2" ] && echo "${2}g"
        }
        set-option global temp_edit_last_buffer %{}
    } catch %{
        set-option global temp_edit_last_buffer %arg{1}
        edit %arg{1} %arg{2}
    }
}
define-command temp-delete-buffer -docstring 'Delete the buffer used by `temp-edit`' %{
    evaluate-commands %sh{
        if [ "$kak_opt_temp_edit_last_buffer" ]; then
            echo delete-buffer "'$(kakconf double-string \' <<<"$kak_opt_temp_edit_last_buffer")'"
            echo set-option global temp_edit_last_buffer %{}
        fi
    }
}

define-command backup-selections -docstring 'Backup all selections to the backup register' %{
    execute-keys -draft '"bZ'
}
define-command restore-selections -docstring 'Restore all selections from the backup register' %{
    execute-keys '"bz'
}

# FZF.
# ‾‾‾‾

define-command fzf-edit -docstring 'Edit file using FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
fzfpreview=\"buffile=\\\$(kakconf double-string \' <<<{}); kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ temp-edit '\\\$buffile' }\\\"\"
result=\"\$(fzf --preview=\"\$fzfpreview\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            buffer $kak_quoted_buffile
            temp-delete-buffer
        }
    \"
else
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            set-option global temp_edit_last_buffer %{}
        }
    \"
fi
"
    }
}

define-command fzf-cd -docstring 'Change directory using FZF' %{
    nop %sh{
        tmpfile=/tmp/kak_cd
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
        edit -readonly $tmpfile
        remove-highlighter \"window/column_${kak_opt_autowrap_column}_default,$kak_opt_gruvbox_bg0\"
    }
\"

args=\"\$(fd --type d --hidden --follow --exclude .git | fzf --preview=\"ls -lha {+} >$tmpfile; kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ edit! -readonly $tmpfile }\\\"\" --preview-window=':0')\"

if [ \"\$args\" ]; then
    args=\$(kakconf double-string \' <<<\"\$args\")
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            change-directory '\$args'
        }
    \"
fi

kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        restore-selections
        delete-buffer $tmpfile
    }
\"
rm -f $tmpfile
"
    }
}

define-command fzf-buffer -docstring 'Change buffer using FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
fzfpreview=\"buffile=\\\$(kakconf double-string \' <<<{}); kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ buffer '\\\$buffile' }\\\"\"
eval \"set -- $kak_quoted_buflist\"
result=\"\$(printf '%s\n' \"\$@\" | fzf --preview=\"\$fzfpreview\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            buffer $kak_quoted_buffile
        }
    \"
fi
"
    }
}

define-command fzf-lines -docstring 'Search through lines of a file using FZF' %{
    nop %sh{
        tmpfile=/tmp/kak_lines
        mkfifo $tmpfile
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
        write $tmpfile
    }
\"

result=\"\$(fzf --preview=\"kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ put-cursors-zero {+n} }\\\"\" --preview-window=':0' <$tmpfile)\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            restore-selections
        }
    \"
fi
rm -f $tmpfile
"
    }
}

define-command fzf-rg -params 1 -docstring 'Jump to a file at a specific line using Ripgrep and FZF' %{
    nop %sh{
        tmux split-window -f -l '30%' "
kak -p ${kak_session@Q} <<<\"
    evaluate-commands -client ${kak_client@Q} %{
        backup-selections
    }
\"

result=\"\$(rg ${1@Q} --line-number | fzf --preview=\"kak -p ${kak_session@Q} <<<\\\"evaluate-commands -client ${kak_client@Q} %{ temp-edit \\\$(rg '(.+):(\d+)' -o -r '\\\$1 \\\$2' <<<{}) }\\\"\" --preview-window=':0')\"

if [ -z \"\$result\" ]; then
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            restore-selections
            temp-delete-buffer
        }
    \"
else
    kak -p ${kak_session@Q} <<<\"
        evaluate-commands -client ${kak_client@Q} %{
            set-option global temp_edit_last_buffer %{}
        }
    \"
fi
"
    }
}

define-command fzf-rg-prompt -docstring 'Jump to a file at a specific line using Ripgrep and FZF (prompt)' %{
    prompt 'ripgrep:' %{fzf-rg %val{text}}
}

declare-user-mode fzf
map global user f ': enter-user-mode fzf<ret>' -docstring 'FZF mode'
map global fzf f ': fzf-edit<ret>' -docstring 'Edit file using FZF'
map global fzf d ': fzf-cd<ret>' -docstring 'Change directory using FZF'
map global fzf b ': fzf-buffer<ret>' -docstring 'Change buffer using FZF'
map global fzf l ': fzf-lines<ret>' -docstring 'Search through lines of a file using FZF'
map global fzf r ': fzf-rg-prompt<ret>' -docstring 'Jump to a file at a specific line using Ripgrep and FZF (prompt)'

# System clipboard handling.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command xsel-yank -docstring 'Yank active selection to X11 clipboard' %{
    execute-keys '<a-|>xsel -ib<ret>: echo -markup %{{Information}yanked active selection to X11 clipboard}<ret>'
}
define-command xsel-replace -docstring "Replace all selections with X11 clipboard's contents" %{
    execute-keys '|xsel -ob<ret>'
}

map global user p ': evaluate-commands %sh{ kakconf paste after }<ret>' -docstring 'Paste (after) from X11 clipboard'
map global user P ': evaluate-commands %sh{ kakconf paste before }<ret>' -docstring 'Paste (before) from X11 clipboard'
map global user <a-p> ': evaluate-commands %sh{ kakconf paste after -s }<ret>' -docstring 'Paste (after and select) from X11 clipboard'
map global user <a-P> ': evaluate-commands %sh{ kakconf paste before -s }<ret>' -docstring 'Paste (before and select) from X11 clipboard'
map global user y ': xsel-yank<ret>' -docstring 'Yank active selection to X11 clipboard'
map global user R ': xsel-replace<ret>' -docstring "Replace all selections with X11 clipboard's contents"

# Highlight hidden characters.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command toggle-whitespaces -docstring 'Toggle the visibility of whitespace characters' %{
    try %{
        add-highlighter global/ show-whitespaces
    } catch %{
        remove-highlighter global/show-whitespaces
    }
}

map global user 'h' ': toggle-whitespaces<ret>' -docstring 'Toggle the visibility of whitespace characters'

# TODO(agnipau): Auto pairs.

# Increment/decrement numbers.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

define-command increment-number -params 1 -docstring "Increment the selection" %{
    execute-keys "| kakconf inc-number -o %arg{1}<ret>"
}
define-command decrement-number -params 1 -docstring "Decrement the selection" %{
    execute-keys "| kakconf dec-number -o %arg{1}<ret>"
}
define-command incnumber -docstring "Increment the selection interactively" %{
    prompt 'increment:' %{increment-number %val{text}}
}
define-command decnumber -docstring "Decrement the selection interactively" %{
    prompt 'decrement:' %{decrement-number %val{text}}
}

declare-user-mode arithmetic-lock
map global user a ': enter-user-mode -lock arithmetic-lock<ret>' -docstring 'Arithmetic mode (lock)'
map global arithmetic-lock j ': decrement-number 1<ret>' -docstring 'Decrement number by 1'
map global arithmetic-lock k ': increment-number 1<ret>' -docstring 'Increment number by 1'
map global arithmetic-lock J ': decrement-number 10<ret>' -docstring 'Decrement number by 10'
map global arithmetic-lock K ': increment-number 10<ret>' -docstring 'Increment number by 10'
declare-user-mode arithmetic
map global user A ': enter-user-mode arithmetic<ret>' -docstring 'Arithmetic mode'
map global arithmetic j ': decnumber<ret>' -docstring 'Decrement number'
map global arithmetic k ': incnumber<ret>' -docstring 'Increment number'

# Editor config integration.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Highlight the word under the cursor.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# Taken from mawww's dotfiles.

# set-face global CurrentWord "default,%opt{gruvbox_bg2}"

# hook global NormalIdle .* %{
#     evaluate-commands -draft %{
#         try %{
#             execute-keys '<space><a-i>w <a-k>\A\w+\z<ret>'
#             add-highlighter -override global/currentword regex "\b\Q%val{selection}\E\b" 0:CurrentWord
#         } catch %{
#             add-highlighter -override global/currentword group
#         }
#     }
# }

# Tab behavior.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾

# Insert spaces when tab is pressed.
hook global InsertChar '\t' %{
    execute-keys -draft "h%opt{indentwidth}@"
}

# Delete %opt{softtabstop} number of spaces with a single keypress if possible.
hook global InsertDelete ' ' %{
    try %{
        execute-keys -itersel -draft "<a-h><a-k>^\h+.\z<ret>I<space><esc><lt>"
    } catch %{
        try %{
            execute-keys -itersel -draft "h%opt{softtabstop}<s-h>2<s-l>s\h+\z<ret>d"
        }
    }
}

# Remove trailing spaces before saving.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global BufWritePre .* %{
    try %{
        evaluate-commands %sh{
            case "$kak_opt_filetype" in
            asciidoc|markdown) exit ;;
            *) echo execute-keys -draft '%s\h+$<ret>d' ;;
            esac
        }
    }
}

# Custom mappings.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

map global normal '<space>' ',' -docstring 'Leader key'
map global normal ',' '<space>' -docstring 'Remove all selections except main'
map global normal '<a-,>' '<a-space>' -docstring 'Remove the main selection'

map global normal '#' ': comment-line<ret>' -docstring 'Comment/uncomment selection'
map global user '<space>' '/(?i)' -docstring 'Search'

# Means <c-j>.
map global normal '<ret>' '3j'
map global normal '<c-k>' '3k'
# Means <c-h>.
map global normal '<backspace>' 'gh'
map global normal '<c-l>' 'gl'

# Window management.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

declare-option -docstring 'Controls the layout of the panes' bool wm_focus_mode true
define-command wm-focus-mode -docstring 'Toggle focus mode' %{
    evaluate-commands %sh{
        if [ "$kak_opt_wm_focus_mode" == true ]; then
            echo set-option global wm_focus_mode false
        else
            echo set-option global wm_focus_mode true
        fi
        echo wm-balance
    }
}

define-command wm-balance -docstring 'Balance the panes according to %opt{wm_focus_mode}' %{
    nop %sh{
        if [ "$kak_opt_wm_focus_mode" == true ]; then
            active_pane="$(tmux run 'echo #{pane_id}')"
            size=100
            for id in $(tmux list-panes -F '#{pane_id}'); do
                [ "$id" == "$active_pane" ] && continue
                tmux resize-pane -t "$id" -x '5%'
                size="$(( size - 5 ))"
            done
            tmux resize-pane -t "$active_pane" -x "$size%"
        else
            tmux select-layout even-horizontal
        fi
    }
}

define-command wm-split -docstring 'New horizontal split and balance splits horizontally' %{
    evaluate-commands %sh{
        tmux split-window -h "kak -c $kak_session"
        echo wm-balance
    }
}

define-command wm-close -docstring 'Close the current split and balance splits horizontally' %{
    evaluate-commands %sh{
        tmux kill-pane
        echo wm-balance
    }
}

define-command wm-focus -params 1 -docstring 'Focus left split' %{
    evaluate-commands %sh{
        tmux select-pane "$1"
        echo wm-balance
    }
}

declare-user-mode wm
            map global normal '<c-w>' ': enter-user-mode wm<ret>' -docstring 'Window management mode'
map global wm '<c-w>' ': wm-split<ret>' -docstring 'New horizontal split and balance splits horizontally'
map global wm '<backspace>' ': wm-focus -L<ret>' -docstring 'Focus left split'
map global wm '<c-l>' ': wm-focus -R<ret>' -docstring 'Focus right split'
map global wm '<ret>' ': wm-focus -D<ret>' -docstring 'Focus below split'
map global wm '<c-k>' ': wm-focus -U<ret>' -docstring 'Focus above split'
map global wm '<c-d>' ': wm-close<ret>' -docstring 'Close the current split and balance splits horizontally'
map global wm '<c-f>' ': wm-focus-mode<ret>' -docstring 'Toggle focus mode'

# Surround.
# ‾‾‾‾‾‾‾‾‾

declare-user-mode surround
map global user s ': enter-user-mode surround<ret>' -docstring 'Surround mode'

# This single line blows Tim Pope's vim-surround away.
# Kakoune is way too powerful to be real.
map global surround s ': execute-keys "Ls\A.|.\z<lt>ret<gt>i"<ret>' -docstring 'Surround with string'

declare-user-mode surround-lock
map global user S ': enter-user-mode -lock surround-lock<ret>' -docstring 'Surround mode (lock)'

map global surround-lock ( ': execute-keys "i(<lt>esc<gt>Ha)<lt>esc<gt>"<ret>' -docstring 'Surround with ()'
map global surround-lock ) ': execute-keys "i(<lt>esc<gt>Ha)<lt>esc<gt>"<ret>' -docstring 'Surround with ()'

map global surround-lock [ ': execute-keys "i[<lt>esc<gt>Ha]<lt>esc<gt>"<ret>' -docstring 'Surround with []'
map global surround-lock ] ': execute-keys "i[<lt>esc<gt>Ha]<lt>esc<gt>"<ret>' -docstring 'Surround with []'

map global surround-lock { ': execute-keys "i{<lt>esc<gt>Ha}<lt>esc<gt>"<ret>' -docstring 'Surround with {}'
map global surround-lock } ': execute-keys "i{<lt>esc<gt>Ha}<lt>esc<gt>"<ret>' -docstring 'Surround with {}'

# LSP.
# ‾‾‾‾

evaluate-commands %sh{
    kak-lsp --kakoune -s "$kak_session"
}

set-option global lsp_diagnostic_line_error_sign '█'
# set-option global lsp_diagnostic_line_warning_sign '▓'
set-option global lsp_diagnostic_line_warning_sign '▒'
set-option global lsp_hover_anchor true
set-option global lsp_insert_spaces true
set-option global lsp_auto_highlight_references true

set-face global DiagnosticError "default+u"
set-face global DiagnosticWarning "default+u"
set-face global LineFlagErrors "%opt{gruvbox_c9_red}"

map global user 'l' ': enter-user-mode lsp<ret>' -docstring 'LSP mode'
map global lsp 'R' ': lsp-rename-prompt<ret>' -docstring 'Rename symbol under the main cursor (prompt for a new name)'

hook global WinSetOption filetype=(rust|python|sh|dart) %{
    lsp-enable-window
}

define-command lsp-restart -docstring 'Restart kak-lsp session' %{
    lsp-stop
    lsp-start
}

# Custom objects.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

# Taken from mawww's dotfiles.
map -docstring "XML tag object" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

# Language configuration.
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt'
    hook buffer BufWritePre .* %{format}
    set-option buffer lsp_server_configuration rust.clippy_preference="on"
}

hook global WinSetOption filetype=zig %{
    set-option buffer formatcmd 'zig fmt --stdin'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=python %{
    set-option buffer formatcmd 'autopep8 -'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=cpp %{
    set-option buffer formatcmd 'clang-format'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=grep %{
    map buffer normal '<c-f>' ': grep-jump<ret>'
    # TODO(agnipau): Why this is buggy?
    # map buffer goto 'd' ': grep-jump<ret>'
}

hook global WinSetOption filetype=html %{
    set-option buffer formatcmd 'prettier --parser=html'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=typescript %{
    set-option buffer formatcmd 'prettier --parser=typescript'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=css %{
    set-option buffer formatcmd 'prettier --parser=css'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=json %{
    set-option buffer formatcmd 'jq .'
    hook buffer BufWritePre .* %{format}
}

hook global BufCreate '.*\.mk$' %{
    set-option buffer filetype makefile
}

hook global BufCreate '.*\.cs$' %{
    set-option buffer filetype csharp
}

hook global BufCreate '.*\.config/polybar/config$' %{
    set-option buffer filetype ini
}

